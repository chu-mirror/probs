@[data@]
#define MAXN 10000
int numbers[MAXN];
int size;
@

Auxilialary functions.
@[functions@]
void swap(int p1, int p2) {
	int t = numbers[p1];
	numbers[p1] = numbers[p2];
	numbers[p2] = t;
}

int bigger(int p1, int p2) {
	return numbers[p1] > numbers[p2] ? p1 : p2;
}
@

@[main@]
@{input numbers@}
@{sort numbers@}
@{output numbers@}
@

@[input numbers@]
while (scanf("%d", numbers + size) != EOF) size++;
@

@[output numbers@]
{
	int i;
	for (i = 0; i < size; i++) printf("%d ", numbers[i]);
}
@

quicksort: sort numbers[l..r)
@[functions@]
void quicksort(int l, int r)
{
	if (r - l < 2) return;

	int p = l;
	@{divide the numbers by numbers[p]@}
	quicksort(l, p);
	quicksort(p+1, r);
}
@

numbers[p1..p2) < numbers[p]
numbers[p2..r) > numbers[p]

@[divide the numbers by numbers[p]@]
{
	int p1, p2;
	p1 = p2 = r;
	do {
		p1--;
		if (bigger(p1, p) == p1) {
			swap(p1, --p2);
		}
	} while (p1 - l > 1);
	swap(p, p2-1);
}
@

@[sort numbers@]
quicksort(0, size);
@

@[samples@]
===
7 6 5 4 3 2 1
>>>
1 2 3 4 5 6 7
@

