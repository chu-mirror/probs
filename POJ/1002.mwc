@[main@]
{ int n;
	scanf("%d\n", &n);
	while (n--) { int num;
		@{read and parse input as |num|@}
		@{record |num|@}
	}
	quicksort(0, size);
	@{output@}
}
@

@[data@]
int map[] = {
	['A'] = 2, ['B'] = 2, ['C'] = 2,
	['D'] = 3, ['E'] = 3, ['F'] = 3,
	['G'] = 4, ['H'] = 4, ['I'] = 4,
	['J'] = 5, ['K'] = 5, ['L'] = 5,
	['M'] = 6, ['N'] = 6, ['O'] = 6,
	['P'] = 7, ['R'] = 7, ['S'] = 7,
	['T'] = 8, ['U'] = 8, ['V'] = 8,
	['W'] = 9, ['X'] = 9, ['Y'] = 9
};
@

@[read and parse input as |num|@]
{ char c;
	num = 0;
	while ((c = getchar()) != '\n') {
		if (c == '-') continue;
		num *= 10;
		if (map[c]) num += map[c];
		else num += c - '0';
	}
}
@

@[data@]
int pairs[MAXSIZE][2];
int np;
@

@[macros@]
#define HKEY(p) pairs[p][0]
#define HVAL(p) pairs[p][1]
#define KEY(p) pairs[p][0]
@

@[record |num|@]
{ list_t l = hsearch(num);
	if (!l) {
		pairs[np][0] = num;
		pairs[np][1] = 1;
		hinsert(np);
		values[size++] = np;
		np++;
	} else {
		pairs[car(l)][1]++;
	}
}
@

@[output@]
{ int i, f = 1;
	for (i = 0; i < size; i++) { int n = pairs[values[i]][0]; int v = hvalue(n);
		if (v > 1) {
			printf("%03d-%04d %d\n", n/10000, n%10000, v);
			f = 0;
		}
	}
	if (f) {
		printf("No duplicates.\n");
	}
}
@

@[samples@]
===
12
4873279
ITS-EASY
888-4567
3-10-10-10
888-GLOP
TUT-GLOP
967-11-11
310-GINO
F101010
888-1200
-4-8-7-3-2-7-9-
487-3279
>>>
310-1010 2
487-3279 4
888-4567 3
===
3
111-0000
201-3343
SSS-CCCC
>>>
No duplicates.
@

